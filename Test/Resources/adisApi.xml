<?xml version="1.0"?>
<doc>
    <assembly>
        <name>adisApi</name>
    </assembly>
    <members>
        <member name="T:AdisApi.TimeoutException">
            <summary>
            Exception for time out.
            </summary>
        </member>
        <member name="M:AdisApi.TimeoutException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.TimeoutException.#ctor(System.Exception)">
            <summary>
            
            </summary>
            <param name="inner"></param>
        </member>
        <member name="M:AdisApi.TimeoutException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AdisApi.TimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:AdisApi.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AdisApi.AdisCommand">
            <summary>
            Constants for Blackfin commands in adis / user command space
            </summary>
        </member>
        <member name="T:AdisApi.Gpio">
            <summary>
            Gpio object, functions like sdpApi1.Gpio.
            </summary>
        </member>
        <member name="M:AdisApi.Gpio.#ctor(AdisApi.AdisBase,System.Int32)">
            <summary>
            
            </summary>
            <param name="adis"></param>
            <param name="sdpConn"></param>
        </member>
        <member name="M:AdisApi.Gpio.configInput(System.Byte)">
            <summary>
            
            </summary>
            <param name="bitsMask"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Gpio.configOutput(System.Byte)">
            <summary>
            
            </summary>
            <param name="bitsMask"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Gpio.bitClear(System.Byte)">
            <summary>
            
            </summary>
            <param name="bitsMask"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Gpio.bitSet(System.Byte)">
            <summary>
            
            </summary>
            <param name="bitsMask"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Gpio.bitToggle(System.Byte)">
            <summary>
            
            </summary>
            <param name="bitsMask"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Gpio.dataRead(System.Byte@)">
            <summary>
            
            </summary>
            <param name="bitsMask"></param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.AdisVersion">
            <summary>
            Class containing version info for SDP software and firmware.
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.SdpMajorRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.SdpMinorRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.SdpHostRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.SdpBaseRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.AdisMajorRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.AdisMinorRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.AdisBuildRev">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.CompileDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AdisVersion.CompileTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.AdisVersion.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AdisApi.AddrDataPair">
            <summary>
            Stores an address and the data associated with that address.
            </summary>
        </member>
        <member name="F:AdisApi.AddrDataPair.addr">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.AddrDataPair.data">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.AddrDataPair.#ctor">
            <summary>
            Creates a new instance of AddressDataPair
            </summary>
        </member>
        <member name="M:AdisApi.AddrDataPair.#ctor(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Creates a new instance of AddrDataPair
            </summary>
        </member>
        <member name="P:AdisApi.AddrDataPair.DebuggerDisplay">
            <summary>
            Create a string representation for the Visual Studio Debugger
            </summary>
        </member>
        <member name="M:AdisApi.AddrDataPair.ToString">
            <summary>
            Returns a string representation of the AddrDataPair
            </summary>
            <returns></returns>
        </member>
        <member name="T:AdisApi.AdisBase">
            <summary>
            Class containig information and methods related to the Base Class for the ADiS SDP functionality.
            </summary>
        </member>
        <member name="F:AdisApi.AdisBase.ExpectedGuid">
            <summary>
            Expected GUID of adis user code in Blackfin
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.#ctor">
            <summary>
            Initializes a new instance of the adisBase class.
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.#ctor(sdpApi1.SdpBase)">
            <summary>
            Initializes a new instance of the adisBase class.
            </summary>
            <param name="sdpBase">sdpBase object used for this instance.</param>
        </member>
        <member name="P:AdisApi.AdisBase.Verbose">
            <summary>
            Suppresses driver version mismatch message if set to False.
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.IsConncted">
            <summary>
            Stores the USB connection state of the SDP board.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.ConnectWithDialog(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="id1"></param>
            <param name="id2"></param>
        </member>
        <member name="M:AdisApi.AdisBase.Connect(System.Int64)">
            <summary>
            Establishes USB connection with SDP hardware.
            </summary>
            <param name="id">id of matching hardware</param>
        </member>
        <member name="M:AdisApi.AdisBase.Connect(System.Int64,System.Int64)">
            <summary>
            Establishes USB connection with SDP hardware.
            </summary>
            <param name="id1">id of matching hardware</param>
            <param name="id2">id of matching hardware</param>
        </member>
        <member name="M:AdisApi.AdisBase.Connect">
            <summary>
            Establishes USB connection with any piece of SDP hardware.
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.GetInfo">
            <summary>
            Returns a multi-lin string containing information about the firmware running on the sdp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.GetBootStatus">
            <summary>
            Returns the boot status of the firmware running on the sdp.
            </summary>
            <returns></returns>    
        </member>
        <member name="M:AdisApi.AdisBase.GetUserGuid">
            <summary>
            Returns the GUID of the user code in the firmware loaded on the sdp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.GetVersion">
            <summary>
            Returns versions of firmware and software for a board.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.GetUserVersion">
            <summary>
            Gets the version of the user code used in the firmware running on the sdp.
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.RebootfromSpi">
            <summary>
            Reboots the sdp.
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.Disconnect">
            <summary>
            Disconnects the sdp.
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.ResetAndDisconnect">
            <summary>
            Resets, then disconnects the sdp.
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.ProgramSDRAM(System.String,System.Boolean)">
            <summary>
            Downloads a new program to the SDP hardware SDRAM.
            </summary>
            <param name="fileName">Path to file containing the Loader (.ldr) data for the new firmware.</param>
            <param name="reboot">Set to true if SDP should reboot using new firmware.</param>
        </member>
        <member name="M:AdisApi.AdisBase.ProgramSDRAM(System.IO.StreamReader,System.Boolean)">
            <summary>
            Downloads a new program to the SDP hardware SDRAM.
            </summary>
            <param name="sr">Stream reader attached to the Loader (.ldr) data for the new firmware.</param>
            <param name="reboot">Set to true if SDP should reboot using new firmware.</param>
        </member>
        <member name="M:AdisApi.AdisBase.ProgramSDRAM(System.Byte[],System.Boolean)">
            <summary>
            Downloads a new program to the SDP hardware SDRAM.
            </summary>
            <param name="ldr">Loader (.ldr) data for the new firmware.</param>
            <param name="reboot">Set to true if SDP should reboot using new firmware.</param>
        </member>
        <member name="M:AdisApi.AdisBase.CheckData(System.UInt32)">
            <summary>
            Returns CRC calculated on data previously stored in SDRAM.
            </summary>
            <returns>CRC-32 of data as stored in the SDP SDRAM buffer.</returns>
        </member>
        <member name="M:AdisApi.AdisBase.StoreData(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Loads a data onto the SDP board SDRAM.
            </summary>
            <returns>CRC-32 of data as stored in the SDP SDRAM buffer.</returns>
        </member>
        <member name="M:AdisApi.AdisBase.StoreData(System.String)">
            <summary>
            Loads a data onto the SDP board SDRAM.
            </summary>
            <returns>CRC-32 of data as stored in the SDP SDRAM buffer.</returns>
        </member>
        <member name="M:AdisApi.AdisBase.StoreData(System.IO.BinaryReader)">
            <summary>
            Loads a data onto the SDP board SDRAM.
            </summary>
            <returns>CRC-32 of data as stored in the SDP SDRAM buffer.</returns>
        </member>
        <member name="M:AdisApi.AdisBase.FlashLed">
            <summary>
            Flashes the LED on the target SDP or Eval board.
            </summary>
        </member>
        <member name="M:AdisApi.AdisBase.NewGpio(System.Int32)">
            <summary>
            
            </summary>
            <param name="sdpConn"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.AdisCodeRunning">
            <summary>
            Check to see if Blackfin has correct user code.
            </summary>
            <returns>true if SDP Blackfin user code has expected guid.</returns>
        </member>
        <member name="M:AdisApi.AdisBase.CountSdpBoards">
            <summary>
            Returns Total Number of SDP boards found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.CountSdpBoards(System.Int32,System.Int32)">
            <summary>
            Counts the number of (booted) SDP boards plugged into a PC, while waiting for boards to be detected."
            </summary>
            <param name="msTimeOut">Milliseconds to time out waiting for boards to be found.</param>
            <param name="minBoards">Minimum number of boards that the routine will wait to find.</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.CountSdpBoards(System.Int32)">
            <summary>
            Counts the number of (booted) SDP boards plugged into a PC, while waiting for at least one board to be detected."
            </summary>
            <param name="msTimeOut">Milliseconds to time out waiting for at least one board to be found.</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.FindSdpBoard">
            <summary>
            Returns an array of u32.
            Element 0 returns # of Analog Devices iSensor Evaluation Boards. 
            Element 1 returns # of Analog Devices Custom SDP boards (could be sdp-b or not programmed OTP Eval boards)
            Element 2 returns # of Analog Devices System Demonstration Platform SDP-B (fresh from factory; not programmed by us)
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.AdisBase.FindSdpDriverVersion">
            <summary>
            Returns the version of SDP board driver. SDP board must be attached to computer.  Returns null if driver not found.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AdisApi.FakeSpi32Interface">
            <summary>
            This class is a fale implementation of the ISpi32Interface for unit testing.
            </summary>
        </member>
        <member name="P:AdisApi.FakeSpi32Interface.DrActive">
            <summary>
            This property is used to get/set the data ready triggering for buffered streams. If set to true, each bufferd stream "packet"
            will start on a data ready posedge. This is needed to implement the IRegInterface.
            </summary>
        </member>
        <member name="P:AdisApi.FakeSpi32Interface.DrPin">
            <summary>
            This property is used to get or set the pin used to trigger data ready captures.
            </summary>
        </member>
        <member name="P:AdisApi.FakeSpi32Interface.DrPolarity">
            <summary>
            This property is used to get or set the data ready polarity. True means data ready is triggered on
            a rising edge of the data ready pin. False means that data ready is triggered on a falling edge of the data ready pin.
            </summary>
        </member>
        <member name="P:AdisApi.FakeSpi32Interface.StreamTimeoutSeconds">
            <summary>
            This property is used to get/set the buffered stream timeout, in seconds. This is needed to implement the IRegInterface.
            </summary>
        </member>
        <member name="M:AdisApi.FakeSpi32Interface.GetBufferedStreamDataPacket">
            <summary>
            Retrieve a Simulated data buffer produced by the StartBufferedStream function.
            </summary>
            <returns>The data packet, as a uint array. Should return nothing if there are no buffers available</returns>
        </member>
        <member name="M:AdisApi.FakeSpi32Interface.TransferArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Emulates Transfer Functionality, utilizing fake read data and fake write data buffers.
            </summary>
            <param name="WriteData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="P:AdisApi.FakeSpi32Interface.FakeReadData">
            <summary>
            Buffer of data to be returned by read commands.
            </summary>
        </member>
        <member name="P:AdisApi.FakeSpi32Interface.FakeWriteData">
            <summary>
            Buffer of data that was written in last simulated write command call.
            </summary>
        </member>
        <member name="M:AdisApi.FakeSpi32Interface.AddFakeWriteData(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Adds data to the buffer that tracks fals write data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.FakeSpi32Interface.ClearFakeWriteData">
            <summary>
            Clears the buffer of accumulated data from write operations.
            </summary>
        </member>
        <member name="M:AdisApi.FakeSpi32Interface.GetFakeReadData(System.Int32)">
            <summary>
            Gets specified number of words from the fake read data buffer and updates read data offset for next transfer
            </summary>
            <param name="dataLength"></param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.IPinFcns">
            <summary>
            An inteface for pin functions. 
            </summary>
        </member>
        <member name="M:AdisApi.IPinFcns.PulseDrive(AdisApi.IPinObject,System.UInt32,System.Double,System.UInt32)">
            <summary>
            Sends a pulse to the specified pin
            </summary>
            <param name="pin">IPinObject to use for PulseDrive Operation</param>
            <param name="polarity">0 for falling edge, 1 for rising edge</param>
            <param name="pperiod">Period of pulse</param>
            <param name="mode">Number of times the pulse appears</param>
        </member>
        <member name="M:AdisApi.IPinFcns.PulseWait(AdisApi.IPinObject,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Waits for an edge / pulse
            </summary>
            <param name="pin">IPinObject to use for PulseWait Operation</param>
            <param name="polarity">0 for falling, 1 for rising</param>
            <param name="delayInMs">Delay / time elapsed (ms) before looking for edge trigger</param>
            <param name="timeoutInMs">Max time to wait for edge before exiting the wait for the edge trigger</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IPinFcns.ReadPin(AdisApi.IPinObject)">
            <summary>
            Reads the value of a group of pins
            </summary>
            <param name="pin">IPinObject to use for ReadPin Operation</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IPinFcns.ReadPins(AdisApi.IPinObject[])">
            <summary>
            Sets the value of a pin
            </summary>
            <param name="pins">IPinObjects to use for ReadPin Operation</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IPinFcns.ReadPins(System.Collections.Generic.IEnumerable{AdisApi.IPinObject})">
            <summary>
            Sets the value of a pin
            </summary>
            <param name="pins">IPinObjects to use for ReadPin Operation</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IPinFcns.ReadTime(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Measures the time elapsed between the initial triggered pin and the final triggered pin
            </summary>
            <param name="start_pin">Start Pin Trigger</param>
            <param name="start_polarity">Polarity for start pin trigger; 0 for falling, 1 for rising</param>
            <param name="stop_pin">Stop Pin Trigger</param>
            <param name="stop_polarity">Polarity for stop pin trigger; 0 for falling, 1 for rising</param>
            <param name="delay">Delay after first pin trigger before waiting for final pin trigger</param>
            <returns>Two element array. Time is in uSeconds. Element 0 is MSBs, element 1 id LSBs.</returns>
        </member>
        <member name="M:AdisApi.IPinFcns.SetPin(AdisApi.IPinObject,System.UInt32)">
            <summary>
            Sets the value of a pin
            </summary>
            <param name="pin">IPinObject to use for SetPin Operation</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.IPinObject">
            <summary>
            An inteface for pin objects. 
            </summary>
        </member>
        <member name="P:AdisApi.IPinObject.Invert">
            <summary>
            True if pin logic is to be inverted.
            </summary>
        </member>
        <member name="P:AdisApi.IPinObject.pinConfig">
            <summary>
            Returns a unit that contains an internal represention of the pin location and pin invert bit.
            </summary>
        </member>
        <member name="M:AdisApi.IPinObject.Equals(System.Object)">
            <summary>
            Returns true if instances refer to the same pin.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IPinObject.GetHashCode">
            <summary>
            Returns a hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IPinObject.ToString">
            <summary>
            Returns a string representation of the PinObject.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AdisApi.ISpi32Interface">
            <summary>
            This interface is used to allow for communication using 32 bit SPI transactions. It does not perform any "protocol" management,
            and deals only with raw data.
            </summary>
        </member>
        <member name="M:AdisApi.ISpi32Interface.Transfer(System.UInt32)">
            <summary>
            This function performs a single bi-directional 32 bit SPI transaction. If DrActive is set to false the transfer is performed asynchronously. If DrActive is set to true, 
            the transfer should wait until a data ready condition (determined by DrPin and DrPolarity) is true.
            </summary>
            <param name="WriteData">The 32 bit data to be send to the slave on the MOSI line</param>
            <returns>The 32 bit data sent to the master over the MISO line during the SPI transaction</returns>
        </member>
        <member name="M:AdisApi.ISpi32Interface.TransferArray(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            This function performs an array bi-directional SPI transfer. WriteData.Count() total SPI transfers are performed. If DrActive is set to true, the transfer should wait
            until a data ready condition (determined by DrPin and DrPolarity) is true, and then perform all SPI transfers. If DrActive is false it is performed asynchronously.
            </summary>
            <param name="WriteData">The data to be written to the slave on the MOSI line in each SPI transaction. The total number of transfers performed is determined by the size of WriteData.</param>
            <returns>The data received from the slave device on the MISO line, as an array</returns>
        </member>
        <member name="M:AdisApi.ISpi32Interface.TransferArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            This function performs an array bi-directional SPI transfer. This overload transfers all the data in WriteData numCaptures times. The total
            number of SPI words transfered is WriteData.Count() * numCaptures.
            If DrActive is set to true, the transfer should wait until a data ready condition (determined by DrPin and DrPolarity) is true, and
            then perform all SPI transfers. If DrActive is false it is performed asynchronously.
            </summary>
            <param name="WriteData">The data to be written to the slave on the MOSI line in each SPI transaction.</param>
            <param name="numCaptures">The number of transfers of the WriteData array performed.</param>
            <returns>The data received from the slave device on the MISO line, as an array. The total size is WriteData.Count() * numCaptures</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AdisApi.ISpi32Interface.TransferArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)" -->
        <member name="P:AdisApi.ISpi32Interface.StreamTimeoutSeconds">
            <summary>
            This property is used to get/set the buffered stream timeout, in seconds. This is needed to implement the IRegInterface.
            </summary>
        </member>
        <member name="P:AdisApi.ISpi32Interface.DrActive">
            <summary>
            This property is used to get/set the data ready triggering for buffered streams. If set to true, each bufferd stream "packet"
            will start on a data ready posedge. This is needed to implement the IRegInterface.
            </summary>
        </member>
        <member name="P:AdisApi.ISpi32Interface.DrPin">
            <summary>
            This property is used to get or set the pin used to trigger data ready captures.
            </summary>
        </member>
        <member name="P:AdisApi.ISpi32Interface.DrPolarity">
            <summary>
            This property is used to get or set the data ready polarity. True means data ready is triggered on
            a rising edge of the data ready pin. False means that data ready is triggered on a falling edge of the data ready pin.
            </summary>
        </member>
        <member name="M:AdisApi.ISpi32Interface.StartBufferedStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker)">
            <summary>
            This is similar to the most general streaming function used by the IRegInterface, and all other buffered streaming functions can be derived from 
            it with a little glue logic. When a stream is started, a second thread should be started to pull buffers from the interfacing board asynchronously.
            Each buffer will consist of WriteData.count() * numCaptures 32-bit words, which are just the raw data read back from the DUT over the MISO line. 
            The stream is expected to produce numBuffers total buffers.
            </summary>
            <param name="WriteData">The data to send over the MOSI line</param>
            <param name="numCaptures">The number of interations of the WriteData array to perform in a single buffer</param>
            <param name="numBuffers">The total number of buffers to capture</param>
            <param name="timeoutSeconds">The time to wait on the interfacing board before stopping the stream</param>
            <param name="worker">A background worker used to notify the caller of progress made in the stream. You MUST check that this parameter has been initialized</param>
        </member>
        <member name="M:AdisApi.ISpi32Interface.GetBufferedStreamDataPacket">
            <summary>
            Retrieve a data buffer produced by the StartBufferedStream function.
            </summary>
            <returns>The data packet, as a uint array. Should return nothing if there are no buffers available</returns>
        </member>
        <member name="M:AdisApi.ISpi32Interface.StopStream">
            <summary>
            This function is used to aynchronously stop a buffered stream.
            </summary>
        </member>
        <member name="T:AdisApi.IBurstSpiInterface">
            <summary>
            This interface defines a protocol agnostic burst SPI
            </summary>
        </member>
        <member name="M:AdisApi.IBurstSpiInterface.BurstTransfer(System.Byte[])">
            <summary>
            Perform a single SPI burst transfer. The burst length (in bytes) is the length of MOSI.
            </summary>
            <param name="MOSI">The data to clock out over the MOSI line</param>
            <returns>The data received on the MISO line during the burst transfer</returns>
        </member>
        <member name="M:AdisApi.IBurstSpiInterface.BurstTransfer(System.Byte[],System.Int32)">
            <summary>
            Performs multiple SPI burst transfers. The burst length (in bytes) is the length of MOSI.
            </summary>
            <param name="MOSI">The data to clock out over the MOSI line during each burst transfer</param>
            <param name="numTransfers">The number of sequential burst transfers to perform</param>
            <returns>All the data received on the MISO line (should be size: MOSI.Count * numTransfers)</returns>
        </member>
        <member name="M:AdisApi.IBurstSpiInterface.StartBurstBufferedStream(System.Byte[],System.Int32)">
            <summary>
            Start a buffered burst transfer stream.
            </summary>
            <param name="MOSI">The data to clock out over the MOSI line during each burst</param>
            <param name="numTransfers">The total number of burst transfers to perform</param>
        </member>
        <member name="M:AdisApi.IBurstSpiInterface.StopStream">
            <summary>
            This function is used to aynchronously stop a buffered stream.
            </summary>
        </member>
        <member name="M:AdisApi.IBurstSpiInterface.GetBufferedBurstDataPacket">
            <summary>
            Get a buffered burst stream packet (one burst)
            </summary>
            <returns>The burst data packet. If none available, returns nothing.</returns>
        </member>
        <member name="P:AdisApi.IBurstSpiInterface.StreamTimeoutSeconds">
            <summary>
            This property is used to get/set the buffered stream timeout, in seconds.
            </summary>
        </member>
        <member name="P:AdisApi.IBurstSpiInterface.DrActive">
            <summary>
            This property is used to get/set the data ready triggering for buffered streams. If set to true, each buffered stream "packet"
            will start on a data ready posedge. This is needed to implement the IRegInterface.
            </summary>
        </member>
        <member name="P:AdisApi.IBurstSpiInterface.DrPin">
            <summary>
            This property is used to get or set the pin used to trigger data ready captures.
            </summary>
        </member>
        <member name="P:AdisApi.IBurstSpiInterface.DrPolarity">
            <summary>
            This property is used to get or set the data ready polarity. True means data ready is triggered on
            a rising edge of the data ready pin. False means that data ready is triggered on a falling edge of the data ready pin.
            </summary>
        </member>
        <member name="T:AdisApi.ISpi32InterfaceException">
            <summary>
            This exception is thrown by the Spi32Wrapper class whenever an invalid result is produced by an ISpi32Interface implementation class.
            </summary>
        </member>
        <member name="M:AdisApi.ISpi32InterfaceException.#ctor(System.String)">
            <summary>
            Constructor for ISpi32InterfaceException. Must be sent with a message.
            </summary>
            <param name="message">Details about </param>
        </member>
        <member name="T:AdisApi.Spi32Wrapper">
            <summary>
            This class acts as a wrapper around a base ISpi32Interface implementation. It asserts that the base implementation produces the correct size data.
            </summary>
        </member>
        <member name="M:AdisApi.Spi32Wrapper.#ctor(AdisApi.ISpi32Interface)">
            <summary>
            Constructor for a Spi32Wrapper
            </summary>
            <param name="SpiInterface">The ISpi32Interface implementation to wrap around</param>
        </member>
        <member name="M:AdisApi.Spi32Wrapper.#ctor">
            <summary>
            Default constructor which takes no arguments. Do not use.
            </summary>
        </member>
        <member name="T:AdisApi.SpiCortexM4">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.SpiCortexM4.#ctor(AdisApi.AdisBase)">
            <summary>
            Creates a new instance of the SpiCortexM4 class using the specified SDP base object.
            </summary>
            <param name="AdisBase"></param>
        </member>
        <member name="P:AdisApi.SpiCortexM4.AdisBase">
            <summary>
            Gets the AdisBase object associated with thie Spi interface.
            </summary>
        </member>
        <member name="P:AdisApi.SpiCortexM4.SclkPin">
            <summary>
            pinObject that specifies the configuration of the target SPI_CLK pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiCortexM4.MisoPin">
            <summary>
            pinObject that specifies the configuration of the target SPI_MISO pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiCortexM4.MosiPin">
            <summary>
            pinObject that specifies the configuration of the target SPI_MOSI pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiCortexM4.CsPin">
            <summary>
            pinObject that specifies the configuration of the target SPI_SEL pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiCortexM4.ResetPin">
            <summary>
            pinObject that specifies the configuration of the target SYS_HWRESET pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiCortexM4.ReadyPin">
            <summary>
            pinObject that specifies the configuration of the target SPI_RDY pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiCortexM4.BootCompleted">
            <summary>
            Returns True if the boot was sucessful. 
            </summary>
        </member>
        <member name="P:AdisApi.SpiCortexM4.SclkFrequency">
            <summary>
            Gets or sets the SPI Clock Frequency (in Hz) to use for this SPI interface.
            </summary>
        </member>
        <member name="M:AdisApi.SpiCortexM4.initializePins(AdisApi.PinMapObject)">
            <summary>
            
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AdisApi.SpiCortexM4.Boot(System.String)">
            <summary>
            Initiaies a SPI Slave Boot of the target using data from named binary file.
            </summary>
            <param name="fileName">Binary file containing boot loader stream data.</param>
        </member>
        <member name="M:AdisApi.SpiCortexM4.Boot(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Initiaies a SPI Slave Boot of the target using data from named binary file.
            </summary>
            <param name="buffer">IEnumerable of bytes containing boot loader stream data.</param>
        </member>
        <member name="M:AdisApi.SpiCortexM4.HardwareReset">
            <summary>
            Writes data currently stored in SDP SDRAM to the flash.
            </summary>
        </member>
        <member name="M:AdisApi.SpiCortexM4.ReadData(System.UInt32,System.UInt32)">
            <summary>
            Reads data from the device.
            </summary>
            <param name="address">Address to start reading from.</param>
            <param name="numBytes">Number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.SpiCortexM4.WriteData(System.UInt32,System.String)">
            <summary>
            Writes data from named binary file into the Flash starting at the given address.
            </summary>
            <param name="address"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:AdisApi.SpiCortexM4.WriteData(System.UInt32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes data from specified buffer into the Flash starting at the given address.
            </summary>
            <param name="address"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AdisApi.SpiCortexM4.IsBlank">
            <summary>
            Returns true if all bytes in flash are blank. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.SpiCortexM4.IsBlank(System.UInt32)">
            <summary>
            Returns true is all bytes in the sector containing address are blank. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.SpiCortexM4.IsBlank(System.UInt32,System.UInt32)">
            <summary>
            Returns true is all bytes in the sector containing startAddress through the sector containing stopAddress are blank 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.SpiCortexM4.Erase">
            <summary>
            Erases the device and waits for erase operation to complete.
            </summary>
        </member>
        <member name="M:AdisApi.SpiCortexM4.Erase(System.UInt32,System.UInt32)">
            <summary>
            Erases a sector of the device and waits for erase operation to complete.
            </summary>
            <param name="startAddress">Number of the sector to erase.</param>
            /// <param name="stopAddress">Number of the sector to erase.</param>
        </member>
        <member name="M:AdisApi.SpiCortexM4.BootWithStoredData">
            <summary>
            Writes data currently stored in SDP SDRAM to the flash.
            </summary>
        </member>
        <member name="M:AdisApi.SpiCortexM4.WriteStoredData(System.UInt32)">
            <summary>
            Writes data currently stored in SDP SDRAM to the flash.
            </summary>
        </member>
        <member name="M:AdisApi.SpiCortexM4.CreateConfigParameters(AdisApi.SpiCortexM4.CortexCommand,System.UInt32,System.UInt32)">
            <summary>
            Creates a parameter array populated using parameters and instance properties.
            </summary>           
        </member>
        <member name="T:AdisApi.SpiFlash">
            <summary>
            Class that supports the SPI flash programming functions using SDP hardware.
            </summary>
        </member>
        <member name="M:AdisApi.SpiFlash.#ctor(AdisApi.AdisBase)">
            <summary>
            Creates a new instance of the SpiFlash class using the specified SDP base object.
            </summary>
            <param name="AdisBase"></param>
        </member>
        <member name="P:AdisApi.SpiFlash.AdisBase">
            <summary>
            Gets the AdisBase object associated with thie Spi interface.
            </summary>
        </member>
        <member name="P:AdisApi.SpiFlash.SclkPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.SpiFlash.MisoPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.SpiFlash.MosiPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.SpiFlash.CsPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.SpiFlash.SclkFrequency">
            <summary>
            Gets or sets the SPI Clock Frequency (in Hz) to use for this SPI interface.
            </summary>
        </member>
        <member name="M:AdisApi.SpiFlash.initializePins(AdisApi.PinMapObject)">
            <summary>
            
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AdisApi.SpiFlash.BlankCheck">
            <summary>
            Returns a count of non-erased bytes read from the device. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.SpiFlash.BlankCheck(System.Byte)">
            <summary>
            Returns a count of non-erased bytes read from a device sector. 
            </summary>
            <param name="sector">Number of sector to check.</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.SpiFlash.Erase">
            <summary>
            Erases the device and waits for erase operation to complete.
            </summary>
        </member>
        <member name="M:AdisApi.SpiFlash.Erase(System.Byte)">
            <summary>
            Erases a sector of the device and waits for erase operation to complete.
            </summary>
            <param name="sector">Number of the sector to erase.</param>
        </member>
        <member name="M:AdisApi.SpiFlash.EraseAndBlankCheck">
            <summary>
            Erases the device, waits for completion, and returns a count of the number of bytes that were not sucessfully erased.
            </summary>
            <returns> Returns a count of non-erased bytes read from the device.</returns>
        </member>
        <member name="M:AdisApi.SpiFlash.EraseAndBlankCheck(System.Byte)">
            <summary>
            Erases a sector, waits for completion, and returns a count of the number of bytes that were not sucessfully erased.
            </summary>
            <returns> Returns a count of non-erased bytes read from the sector.</returns>
        </member>
        <member name="M:AdisApi.SpiFlash.StartErase">
            <summary>
            Starts a device erase process, does NOT wait unti process is complete.
            </summary>
        </member>
        <member name="M:AdisApi.SpiFlash.StartErase(System.Byte)">
            <summary>
            Starts a sector erase process, does NOT wait unti process is complete.
            </summary>
            <param name="sector">Number of the sector to erase.</param>
        </member>
        <member name="M:AdisApi.SpiFlash.ReadCrc(System.Byte,System.UInt16,System.UInt32)">
            <summary>
            Returns a crc32 calculated using the specified number of bytes stating at the given sector and address.
            </summary>
            <param name="sector">Number of sector to start crc comutation from.</param>
            <param name="address">Address to start  crc comutation  from.</param>
            <param name="numBytes">Number of bytes to process.</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.SpiFlash.ReadData(System.Byte,System.UInt16,System.UInt32)">
            <summary>
            Reads data from the device.
            </summary>
            <param name="sector">Number of sector to start read from.</param>
            <param name="address">Address to start reading from.</param>
            <param name="numBytes">Number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.SpiFlash.ReadIdentification">
            <summary>
            Reads the device identification information.
            </summary>
            <returns>Bytes: [0]=Mfg ID, [1]=Memory Type, [2]=Capacity, [3]=CFD length, [n..4]= CFD cntent.</returns>
        </member>
        <member name="M:AdisApi.SpiFlash.ReadStatusRegister">
            <summary>
            Reads the 8 bit status register of the device.
            </summary>
            <returns>Value read from status register.</returns>
        </member>
        <member name="M:AdisApi.SpiFlash.ReadStatusRegister(System.Boolean)">
            <summary>
            Reads the 8 bit status register of the device.
            </summary>
            <returns>Value read from status register.</returns>
        </member>
        <member name="M:AdisApi.SpiFlash.WriteStoredData(System.Byte,System.UInt32)">
            <summary>
            Writes data currently stored in SDP SDRAM to the flash.
            </summary>
            <param name="sector"></param>
            <param name="address"></param>
        </member>
        <member name="M:AdisApi.SpiFlash.WriteData(System.Byte,System.UInt32,System.String)">
            <summary>
            Writes data from named binary file into the Flash starting at the given address.
            </summary>
            <param name="sector"></param>
            <param name="address"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:AdisApi.SpiFlash.WriteData(System.Byte,System.UInt32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes data from specified buffer into the Flash starting at the given address.
            </summary>
            <param name="sector"></param>
            <param name="address"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AdisApi.SpiFlash.CreateDefaultConfigParameters">
            <summary>
            Creates a parameter array populated with default values based on instance properties.
            </summary>           
        </member>
        <member name="T:AdisApi.CPLD">
            <summary>
            Basic SPI configuration, reads, and writes using ADiS spi code on Blackfin.
            </summary>
        </member>
        <member name="M:AdisApi.CPLD.#ctor(AdisApi.AdisBase)">
            <summary>
            Creates a new instance of the CPLD class using the specified SDP base object.
            </summary>
            <param name="AdisBase"></param>
        </member>
        <member name="P:AdisApi.CPLD.AdisBase">
            <summary>
            Gets the AdisBase object associated with the Spi interface.
            </summary>
        </member>
        <member name="P:AdisApi.CPLD.TckPin">
            <summary>
            PinObject that describes the SDP Blackfin gpio pin connected CPLD TCK pin.
            </summary>
        </member>
        <member name="P:AdisApi.CPLD.TmsPin">
            <summary>
            PinObject that describes the SDP Blackfin gpio pin connected CPLD TMS pin.
            </summary>
        </member>
        <member name="P:AdisApi.CPLD.TdiPin">
            <summary>
            PinObject that describes the SDP Blackfin gpio pin connected CPLD TDI pin.
            </summary>
        </member>
        <member name="P:AdisApi.CPLD.TdoPin">
            <summary>
            PinObject that describes the SDP Blackfin gpio pin connected CPLD TDO pin.
            </summary>
        </member>
        <member name="P:AdisApi.CPLD.Filename">
            <summary>
            File name that will be used for programming with next ProgramCpld() call.
            </summary>
        </member>
        <member name="M:AdisApi.CPLD.initializePins(AdisApi.PinMapObject)">
            <summary>
            Fills the TckPin, TmsPin, TdiPin, and TdoPin properties from the given pin map.
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AdisApi.CPLD.StoreXsvf">
            <summary>
            Loads the XSVF file onto the SDP board SDRAM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.CPLD.StoreXsvf(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Loads the XSVF file onto the SDP board SDRAM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.CPLD.StoreXsvf(System.String)">
            <summary>
            Sets the Filename property and loads the specified XSVF file onto the SDP board SDRAM.
            </summary>
            <param name="filename">Path to XSVF file.</param>
        </member>
        <member name="M:AdisApi.CPLD.PlayXsvf(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para>Plays an XSVF file image from the SDP card SDRAM to a Xilinx CPLD.</para><br />
            <para>See Object Browser for Error Retrun Codes.</para><br />
            </summary>
            <param name="TCKpinConfig">Test Clock</param>
            <param name="TMSpinConfig">Test Mode Select</param>
            <param name="TDIpinConfig">Test Data Input</param>
            <param name="TDOpinConfig">Test Data Output</param>
            <returns> 
            <para>0: Success.</para><br />
            <para>1: Unknown error. </para><br />
            <para>2: TDO mismatch.</para><br />        
            <para>3: TDO mismatch after max retries.</para><br />
            <para>4: Illegal command in XSVF file.</para><br />
            <para>5: Illegal state.</para><br />
            <para>6: Data overflow.</para><br />
            </returns>
        </member>
        <member name="M:AdisApi.CPLD.PlayXsvf">
            <summary>
            <para>Plays an XSVF file image from the SDP card SDRAM to a Xilinx CPLD.</para><br />
            <para>See Object Browser for Error Retrun Codes.</para><br />
            </summary>
            <returns> 
            <para>0: Success.</para><br />
            <para>1: Unknown error. </para><br />
            <para>2: TDO mismatch.</para><br />        
            <para>3: TDO mismatch after max retries.</para><br />
            <para>4: Illegal command in XSVF file.</para><br />
            <para>5: Illegal state.</para><br />
            <para>6: Data overflow.</para><br />
            </returns>
        </member>
        <member name="M:AdisApi.CPLD.ProgramCpld">
            <summary>
            <para>Transfer specified in Filename property to SDP, and programs CPLD with transferred file.</para><br />
            <para>See Object Browser for Error Retrun Codes.</para><br />
            </summary>
            <returns> 
            <para>0: Success.</para><br />
            <para>1: Unknown error. </para><br />
            <para>2: TDO mismatch.</para><br />        
            <para>3: TDO mismatch after max retries.</para><br />
            <para>4: Illegal command in XSVF file.</para><br />
            <para>5: Illegal state.</para><br />
            <para>6: Data overflow.</para><br />
            </returns>
        </member>
        <member name="M:AdisApi.CPLD.ProgramCpld(System.String)">
            <summary>
            <para>Sets CPLD Filename property, transfers file to SDP, and programs CPLD with transferred file.</para><br />
            <para>See Object Browser for Error Retrun Codes.</para><br />
            </summary>
            <param name="filename">Location and filename of XSVF to program CPLD with</param>
            <returns> 
            <para>0: Success.</para><br />
            <para>1: Unknown error. </para><br />
            <para>2: TDO mismatch.</para><br />        
            <para>3: TDO mismatch after max retries.</para><br />
            <para>4: Illegal command in XSVF file.</para><br />
            <para>5: Illegal state.</para><br />
            <para>6: Data overflow.</para><br />
            </returns>
        </member>
        <member name="M:AdisApi.CPLD.ProgramCpld(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            <para>Stores bytes to SDP then Plays code from SDP to CPLD.</para>
            <para>Set these properties before calling: this.TckPin.pinConfig, this.TmsPin.pinConfig,</para>
            <para>this.TdiPin.pinConfig, this.TdoPin.pinConfig </para>
            <para>See Object Browser for Error Retrun Codes.</para>
            </summary>
            <returns></returns>       
        </member>
        <member name="T:AdisApi.iSensorSim">
            <summary>
            Basic SPI configuration, reads, and writes using ADiS spi code on Blackfin.
            </summary>    
        </member>
        <member name="M:AdisApi.iSensorSim.setDefaultProperties">
            <summary>
            Set properties to values appropriate for an isensor SPI interface.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSim.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSim.#ctor(AdisApi.AdisBase)">
            <summary>
            
            </summary>
            <param name="AdisBase"></param>
        </member>
        <member name="P:AdisApi.iSensorSim.BurstMode">
            <summary>
            Gets or sets flag for burst mode.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.AdisBase">
            <summary>
            Gets the AdisBase object associated with thie Spi interface.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.Cpha">
            <summary>
            Gets or sets a value indicating whether the Clock Phase is 0 or 1.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.Cpol">
            <summary>
            Gets or sets a value indicating whether the Clock Polarity is 0 or 1.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.DrActive">
            <summary>
            Gets or sets the data ready active bit
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.DrPolarity">
            <summary>
            Gets or sets the data ready polarity.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.Read0Write1Flip">
            <summary>
            If False, Read is Active Low and  Write is Active High. If true, Read is Active High, Write is Active Low
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.SclkFrequency">
            <summary>
            Gets or sets the SPI Clock Frequency (in Hz) to use for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.StallCycles">
            <summary>
            Gets or sets the Slave Select line to use for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.StreamTimeoutSeconds">
            <summary>
            Gets or sets burst timeout value: the max number of seconds to between burst packets. 
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.WordSize">
            <summary>
            Gets the word size (number of SCLKS per read/write) for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.SclkPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.MisoPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.MosiPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.CsPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.ReadyPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.ResetPin">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSim.initializePins(AdisApi.PinMapObject)">
            <summary>
            
            </summary>
            <param name="map"></param>
        </member>
        <member name="P:AdisApi.iSensorSim.SimThrowTimeoutException">
            <summary>
            Simulator will throw TimeoutException upon next applicble call.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.SimReadData">
            <summary>
            Buffer of data to be returned by read commands 
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.SimRtsData">
            <summary>
            Buffer of data to be returned by read commands 
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.SimRtsNull">
            <summary>
            Set to true if GetBufferedStreamDataPacket should return null
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.SimWriteData">
            <summary>
            Buffer of data that was written in last simulated write command call.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSim.SimClear">
            <summary>
            Clears the accumulated write data and method call counts.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.SimResetMethodCallCount">
            <summary>
            Returns the number of calls made to the Reset method since counts were cleared.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSim.SimStartMethodCallCount">
            <summary>
            Returns the number of calls made to the Start method since counts were cleared.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSim.ReadRegArrayStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Starts, reads and returns data from a fixed number of buffers from SDP stream.
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.ReadRegArrayStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32)">
            <summary>
            Starts, reads and returns data from a fixed number of buffers from SDP stream.
            </summary>
            <param name="addrData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.ReadRegArrayStream(System.Collections.Generic.IEnumerable{System.UInt16},System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.StopStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSim.StartBufferedStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker)">
            <summary>
            Starts a buffered stream read, uses the background worker handle to update progress.
            </summary>
            <param name="addrData">Adresses to read/write.</param>
            <param name="numCaptures">Number of captures in each buffer for SDP transfer.</param>
            <param name="numBuffers">Number of buffers to Be captured.</param>
            <param name="timeoutSeconds">Timeout for transmission of one stream packet.</param>
            <param name="worker">BackgroundWorker that routine can report progress to (may be null).</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSim.StartBufferedStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <param name="timeoutSeconds"></param>
            <param name="worker"></param>
        </member>
        <member name="M:AdisApi.iSensorSim.StartStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
        </member>
        <member name="M:AdisApi.iSensorSim.GetBufferedStreamDataPacket">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.GetStreamDataPacketU16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.ReadRegArray(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.ReadRegArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.ReadRegArray(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addrData"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.ReadRegByte(System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.ReadRegWord(System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.WriteRegByte(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.iSensorSim.WriteRegByte(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.iSensorSim.WriteRegByte(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair})">
            <summary>
            
            </summary>
            <param name="addrData"></param>
        </member>
        <member name="M:AdisApi.iSensorSim.WriteRegByte(AdisApi.AddrDataPair)">
            <summary>
            
            </summary>
            <param name="addrData"></param>
        </member>
        <member name="M:AdisApi.iSensorSim.WriteRegWord(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.iSensorSim.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSim.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSim.Write(System.UInt16)">
            <summary>
            Writes data that would be sent to iSensorSpi to SimWriteData Array.
            </summary>
            <param name="writeData">Data word to write.</param>
        </member>
        <member name="M:AdisApi.iSensorSim.Write(System.UInt16[])">
            <summary>
            Writes data that would be sent to iSensorSpi to SimWriteData Array.
            </summary>
            <param name="writeData"></param>
        </member>
        <member name="M:AdisApi.iSensorSim.WriteReadArray(System.UInt16[],System.UInt32)">
            <summary>
            Reads an array of 16 bit words from spi interface in to an ushort array.  
            </summary>
            <returns>Words read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.iSensorSim.WriteReadArray(System.UInt16[])">
            <summary>
            Reads an array of 16 bit words from spi interface in to an ushort array the same length as data.  
            </summary>
            <returns>Words read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.iSensorSim.getCommandWordArray(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Makes an array of READ command words..
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.getCommandWordArray(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair})">
            <summary>
            Makes an array of WRITE command words.
            </summary>
            <param name="addrData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.getCommandWordArray(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Makes an array of WRITE command words.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.getCommandWord(System.UInt32,System.UInt32)">
            <summary>
            Return a WRITE command word if data is provided.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSim.getCommandWord(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Return a WRITE command word if data is not null, READ if data is null.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.IRegInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.IRegInterface.BurstMode">
            <summary>
            Gets or sets the size of the burst data packet in words.  Zero indicates burst mode inactinve. 
            </summary>
        </member>
        <member name="P:AdisApi.IRegInterface.DrActive">
            <summary>
            Gets or sets the data ready active bit
            </summary>
        </member>
        <member name="P:AdisApi.IRegInterface.StreamTimeoutSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.IRegInterface.GetBufferedStreamDataPacket">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.GetStreamDataPacketU16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.ReadRegArray(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.ReadRegArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.ReadRegArray(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addrData"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.ReadRegArrayStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.ReadRegArrayStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="addrData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.ReadRegByte(System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.ReadRegWord(System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.IRegInterface.StartBufferedStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <param name="timeoutSeconds"></param>
            <param name="worker"></param>
        </member>
        <member name="M:AdisApi.IRegInterface.StartBufferedStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker)">
            <summary>
            Starts a buffered stream read, uses the background worker handle to update progress.
            </summary>
            <param name="addrData">Adresses to read/write.</param>
            <param name="numCaptures">Number of captures in each buffer for SDP transfer.</param>
            <param name="numBuffers">Number of buffers to Be captured.</param>
            <param name="timeoutSeconds">Timeout for transmission of one stream packet.</param>
            <param name="worker">BackgroundWorker that routine can report progress to (may be null).</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:AdisApi.IRegInterface.StartStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
        </member>
        <member name="M:AdisApi.IRegInterface.StopStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.IRegInterface.WriteRegByte(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair})">
            <summary>
            
            </summary>
            <param name="addrData"></param>
        </member>
        <member name="M:AdisApi.IRegInterface.WriteRegByte(AdisApi.AddrDataPair)">
            <summary>
            
            </summary>
            <param name="addrData"></param>
        </member>
        <member name="M:AdisApi.IRegInterface.WriteRegByte(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.IRegInterface.WriteRegByte(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.IRegInterface.WriteRegWord(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.IRegInterface.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.IRegInterface.Start">
            <summary>
            
            </summary>
        </member>
        <member name="T:AdisApi.iSensorSpi">
            <summary>
            Basic SPI configuration, reads, and writes using ADiS spi code on Blackfin.
            </summary>    
        </member>
        <member name="M:AdisApi.iSensorSpi.setDefaultProperties">
            <summary>
            Set properties to values appropriate for an isensor SPI interface.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.AbortStream(System.Boolean)">
            <summary>
            Aborts a streaming operation.
            </summary>
            <remarks>
            Should NOT require a bool parameter.  See additional note at CancelStream property.
            </remarks>
            <param name="cancel"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.AbortStream">
            <summary>
            Aborts a streaming operation.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.#ctor">
            <summary>
            Creates a new instance of iSenesorSpi, sets default values. 
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.#ctor(AdisApi.AdisBase)">
            <summary>
            Creates a new instance of iSenesorSpi using specified AdisBase, sets default values. 
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.InitializeInstance">
            <summary>
            Constructor implementation, common to all constructor overloads.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.AdisBase">
            <summary>
            Gets the AdisBase object associated with thie Spi interface.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.AutoPinDisable">
            <summary>
            If true, SPI pins will be tri-stated after each read/erite operation, except for variable length stream operations.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.BurstMode">
            <summary>
            Switches burstMode on and off. Set burstMode to the number of burst read registers. 
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.readStreamDataReturn">
            <summary>
            obsolete
            </summary>
            <remarks>
            This was left over from an earlier experiment.  Marked obsolete with error,
            </remarks>
        </member>
        <member name="P:AdisApi.iSensorSpi.Cpha">
            <summary>
            Gets or sets a value indicating whether the Clock Phase is 0 or 1.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.Cpol">
            <summary>
            Gets or sets a value indicating whether the Clock Polarity is 0 or 1.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.DrActive">
            <summary>
            Gets or sets the data ready active bit
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.DrPolarity">
            <summary>
            Gets or sets the data ready polarity.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.PinDisableDelegate">
            <summary>
            If non-null, this function will be called to disable the pins instead of the default pin disable function.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.PinFunctions">
            <summary>
            Returns the pinFunctions instance used by this instance of iSensorSpi. 
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.SclkFrequency">
            <summary>
            Gets or sets the SPI Clock Frequency (in Hz) to use for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.Read0Write1Flip">
            <summary>
            If False, Read is Active Low and  Write is Active High. If true, Read is Active High, Write is Active Low
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.CancelStream">
            <summary>
            If set to true, will cause stream to be cancelled.
            </summary>
            <remarks>
            Consider a "CancelRequested" pattern similar to backGroundWorker class.
            Should be a "write only" method (see AbortStream above) to set this.
            Stream routines should set back to false when cancel is executed. (using private set.)
            </remarks>
        </member>
        <member name="P:AdisApi.iSensorSpi.StallCycles">
            <summary>
            Gets or sets the number of stall cycles to use for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.StreamTimeoutSeconds">
            <summary>
            Gets or sets burst timeout value: the max number of seconds to between burst packets. 
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.WordSize">
            <summary>
            Gets the word size (number of SCLKS per read/write) for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.TriggerDrRegCommand">
            <summary>
            Register Command to Trigger Data Ready. This was needed for ST LSM330DLC
            Data Ready Signal Stays High Once Data is Ready
            To Pull Data Ready Signal Low, one needs to read either Out_X_H_G, OUT_Y_H_G, and OUT_Z_H_G
            Hence, to do this, one sets TriggerDrRegCommand as 0xad (read command for Out_Z_H_G).
            Firmware will take the value 0xad and execute the read of Out_Z_H_G.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.SclkPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.MisoPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.MosiPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.CsPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.ReadyPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.ResetPin">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.initializePins(AdisApi.PinMapObject)">
            <summary>
            
            </summary>
            <param name="map"></param>
        </member>
        <member name="P:AdisApi.iSensorSpi.sampleRate">
            <summary>
            Used to controll data rate when DR is Not active. iSensorActive must be set to false.
            </summary>
        </member>
        <member name="T:AdisApi.iSensorSpi.frameProtocolType">
            <summary>
            SPI frame protocol identifiers.
            </summary>
        </member>
        <member name="F:AdisApi.iSensorSpi.frameProtocolType.adis16bit">
            <summary>
            Standard legacy 16 bit frame.
            </summary>
        </member>
        <member name="F:AdisApi.iSensorSpi.frameProtocolType.xc32bit">
            <summary>
            A 32 bit SPI frame used by the adxc1500 sensor.
            </summary>
        </member>
        <member name="P:AdisApi.iSensorSpi.frameProtocol">
            <summary>
            Sets the WordSize and Cpha per selected protocol. 
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.Loopback(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numBursts"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.FixedStreamLoopback(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Returns number of errors encountered in a loop back test.
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.VariableStreamLoopback(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Returns number of errors encountered in a loop back test.
            </summary>
            <param name="addr"></param>
            <param name="numBursts"></param>
            <param name="numPackets"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.countLoopbackErrors(System.Collections.Generic.IEnumerable{System.UInt16},System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Returns number of mismatches between a written and read arrays.
            </summary>
            <param name="writeData"></param>
            <param name="readData"></param>
            <returns></returns>
            <remarks>
            Note that writeData will be recycled if readData is longer than writeData.
            </remarks>
        </member>
        <member name="F:AdisApi.iSensorSpi.packetDataSyncQueue">
            <summary>
            Queue for data synchronization.  Stores packets as arrays of ushort data.
            </summary>
        </member>
        <member name="F:AdisApi.iSensorSpi.packetDataSyncLock">
            <summary>
            Object used for locking the queue.  
            </summary>
            <remarks>
            Need an instance variable availabe to multiple threads.
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.GetBufferedStreamDataPacket">
            <summary>
            Dequeues and returns data from streaming read queue.
            </summary>
            <returns>Returns data if it is there, returns null if queue is null or empty.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadStreamQueue">
            <summary>
            Dequeues and returns data from streaming read queue.
            </summary>
            <returns>Returns data if it is there, returns null if queue is empty.</returns>
            <remarks>
            Consider renaming to GetStreamQueueData or something similar. 
            Consider adding manual locking and using a generic Queueto prevent cast.
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32)">
            <summary>
            Starts a buffered stream read, no timeout.
            </summary>
            <param name="addrData">Adresses to read/write.</param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32,System.ComponentModel.BackgroundWorker)">
            <summary>
            Starts a buffered stream read, no timeout.
            </summary>
            <param name="addrData">Adresses to read/write.</param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <param name="worker">BackgroundWorker that routine can report progress to (may be null).</param>
            <remarks>
            This overload allows callers to call without timeoutSeconds.
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Starts a buffered stream read, no background worker.
            </summary>
            <param name="addrData">Adresses to read/write.</param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <param name="timeoutSeconds"></param>
            <remarks>
            This overload allows callers to call without backgroundWorker.
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker)">
            <summary>
            Starts a buffered stream read, uses the background worker handle to update progress.
            </summary>
            <param name="addrData">Adresses to read/write.</param>
            <param name="numCaptures">Number of captures in each buffer for SDP transfer.</param>
            <param name="numBuffers">Number of buffers to Be captured.</param>
            <param name="timeoutSeconds">Timeout for transmission of one stream packet.</param>
            <param name="worker">BackgroundWorker that routine can report progress to (may be null).</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Starts a buffered stream read, no background worker, no Timeout.
            </summary>
            <param name="addr">Adresses to read.</param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <remarks>
            This overload allows callers to call without timeoutSeconds or background worker.
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32,System.ComponentModel.BackgroundWorker)">
            <summary>
            Starts a buffered stream read, no timeout.
            </summary>
            <param name="addr">Adresses to read.</param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <param name="worker">BackgroundWorker that routine can report progress to (may be null).</param>
            <remarks>
            This overload allows callers to call without timeoutSeconds.
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Starts a buffered stream read, no background worker.
            </summary>
            <param name="addr">Adresses to read.</param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <param name="timeoutSeconds"></param>
            <remarks>
            This overload allows callers to call without backgroundWorker.
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker)">
            <summary>
            Starts a buffered stream read, uses the background worker handle to update progress.
            </summary>
            <param name="addr">Adresses to read.</param>
            <param name="numCaptures">Number of captures in each buffer for SDP transfer.</param>
            <param name="numBuffers">Number of buffers to Be captured.</param>
            <param name="timeoutSeconds">Timeout for transmission of one stream packet.</param>
            <param name="worker">BackgroundWorker that routine can report progress to (may be null).</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartBufferedStream(System.UInt16[],System.UInt32,System.UInt32,System.Nullable{System.Int32},System.ComponentModel.BackgroundWorker)">
            <summary>
            Starts a buffered stream read, uses the background worker handle to update progress.
            </summary>
            <param name="writeData">Data to be shifted.</param>
            <param name="numCaptures">Number of captures in each buffer for SDP transfer.</param>
            <param name="numBuffers">Number of buffers to Be captured.</param>
            <param name="timeoutSeconds">Timeout for transmission of one stream packet.</param>
            <param name="worker">BackgroundWorker that routine can report progress to (may be null).</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegArrayStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Starts a stream read, uses the background worker handle to update progress.
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <param name="streamTimeoutInSec"></param>
            <param name="worker"></param>
            <param name="e"></param>
            <remarks>
            This should be obsoleted.  Use the reworked StartBufferedStream above.
            </remarks>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegArrayStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Starts, reads and returns data from a fixed number of buffers using SDP stream.
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegArrayStream(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32,System.UInt32)">
            <summary>
            Starts, reads and returns data from a fixed number of buffers from SDP stream.
            </summary>
            <param name="addrData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegArrayStream32(System.UInt32[],System.UInt32,System.UInt32)">
            <summary>
            To provide a Stream function for full 32 bit uint return data.
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.StopStream">
            <summary>
            Stops an unbuffered stream. 
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.StartStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            Starts a variable length, unbuffered streaming operation.
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.GetStreamDataPacketU16">
            <summary>
            Gets an unbuffered stream packet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.initializeStream(System.UInt16[],System.UInt32,System.UInt32,AdisApi.iSensorSpi.TransferType)">
            <summary>
            Starts a streaming operation in the SDP formware. (internal)
            </summary>
            <param name="writeData"></param>
            <param name="numBursts"></param>
            <param name="numPackets"></param>
            <param name="transferMode"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.initializeStream(System.UInt32[],System.UInt32,System.UInt32,AdisApi.iSensorSpi.TransferType)">
            <summary>
            To accomodate 32 bit write data.
            </summary>
            <param name="writeData"></param>
            <param name="numBursts"></param>
            <param name="numPackets"></param>
            <param name="transferMode"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.StreamFrom(System.Int32)">
            <summary>
            Starts a streaming transfer using the specified packet size.
            </summary>
            <param name="packetWords">number of 16 bit words in a streaming packet.</param>
        </member>
        <member name="M:AdisApi.iSensorSpi.getStreamPacketSize(System.Int32)">
            <summary>
            Returns the appropriate packet size for a given number of words.
            </summary>
            <param name="numWords"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegArray(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegArray(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32)">
            <summary>
            
            </summary>
            <param name="addrData"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegByte(System.UInt32)">
            <summary>
            Reads a byte from the specified register.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadRegWord(System.UInt32)">
            <summary>
            Reads a word from the specified register.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.WriteRegByte(System.UInt32,System.UInt32)">
            <summary>
            Writes bytes to the specified registers.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.WriteRegByte(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Writes bytes to the specified registers.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.WriteRegByte(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair})">
            <summary>
            Writes bytes to the specified registers.
            </summary>
            <param name="addrData"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.WriteRegByte(AdisApi.AddrDataPair)">
            <summary>
            Writes a byte to the specified register.
            </summary>
            <param name="addrData"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.WriteRegWord(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.Reset">
            <summary>
            Sends a low pulse to the reset line, if it is defined.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.Start">
            <summary>
            Sets the reset line high, if defined.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.Write(System.UInt16)">
            <summary>
            Write one unsigned 16 bit word through SPI interface
            </summary>
            <param name="writeData">Data word to write.</param>
        </member>
        <member name="M:AdisApi.iSensorSpi.WriteMsrTime(System.UInt16[],System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="CSpolarity"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.WriteReadArray(System.UInt16[],System.UInt32)">
            <summary>
            Reads an array of 16 bit words from spi interface in to an ushort array.  
            </summary>
            <param name="numCaptures">Number of words to read.</param>
            <param name="writeData">Data words to be sent during each read operations.</param>
            <returns>Words read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.WriteReadArray(System.UInt16[])">
            <summary>
            Reads an array of 16 bit words from spi interface in to an ushort array the same length as data.  
            </summary>
            <param name="writeData">Data words to be sent during each read operations.</param>
            <returns>Words read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.DisablePins">
            <summary>
            Disables the pins used in this SPI interface and leave pins in tri-state mode.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.DisablePinsDefault">
            <summary>
            Disables the SDP pins used in this SPI interface and leave pins in tri-state mode.
            </summary>
        </member>
        <member name="M:AdisApi.iSensorSpi.ReadPin(AdisApi.PinObject)">
            <summary>
            Obsolete.
            </summary>
            <param name="pin"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.getCommandWordArray(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Makes an array of READ command words.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.getCommandWordArray(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair})">
            <summary>
            Makes an array of WRITE or READ command words based on tranfer direction of each word.
            </summary>
            <param name="addrData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.getCommandWordArray(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Makes an array of WRITE command words.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.getCommandWord(System.UInt32)">
            <summary>
            Return a READ command word.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.getCommandWord(System.UInt32,System.UInt32)">
            <summary>
            Return a WRITE command word.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.getCommandWord(System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Return a WRITE command word if data is not null, READ if data is null.
            </summary>
            <param name="addr"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.GetParameterArray(AdisApi.iSensorSpi.TransferType,System.UInt32[],System.UInt32,System.UInt32)">
            <summary>
            Creates and returns a Parameter array for a user command.
            </summary>
            <param name="transferMode"></param>
            <param name="outData"></param>
            <param name="numRegs"></param>
            <param name="numBursts"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.GetParameterArray(AdisApi.iSensorSpi.TransferType,System.UInt32[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates and returns a Parameter array for a user command.
            </summary>
            <param name="transferMode"></param>
            <param name="outData"></param>
            <param name="numRegs"></param>
            <param name="numBursts"></param>
            <param name="numPackets"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.insertDataParameters(System.UInt32[]@,System.UInt32[])">
            <summary>
            inserts data into parameter array, sets numRegisters.
            </summary>
            <param name="header"></param>
            <param name="outData"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.insertConfigParameters(System.UInt32[]@)">
            <summary>
            Inserts parameters for configuration into header based on instance properties.
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:AdisApi.iSensorSpi.Transfer(System.UInt32)">
            <summary>
            
            </summary>
            <param name="WriteData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.TransferArray(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="WriteData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.TransferArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            
            </summary>
            <param name="WriteData"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.TransferArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="WriteData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.iSensorSpi.AdisApi#ISpi32Interface#GetBufferedStreamDataPacket">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AdisApi.OTPFcns">
            <summary>
            Functions for Read and Write to OTP memory
            </summary>
        </member>
        <member name="M:AdisApi.OTPFcns.#ctor">
            <summary>
            Set properties to values for pulse fcns and edge timing measure
            </summary>
        </member>
        <member name="M:AdisApi.OTPFcns.#ctor(AdisApi.AdisBase)">
            <summary>
            
            </summary>
            <param name="AdisBase"></param>
        </member>
        <member name="P:AdisApi.OTPFcns.AdisBase">
            <summary>
            Gets the AdisBase object associated with thie Spi interface.
            </summary>
        </member>
        <member name="M:AdisApi.OTPFcns.ReadOTP(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Reads the OTP memory
            </summary>
            <param name="pageAddr">Page Address</param>
            <param name="halfLoc">Lower half (0) or upper half (1) of page address</param>
            <param name="readSpd">Read speed, default value is 0x1485</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.OTPFcns.WriteOTP(System.UInt32,System.UInt32,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Writes to the OTP memory
            </summary>
            <param name="pageAddr">Page Address</param>
            <param name="halfLoc">0 for lower half of page address; 1 for upper half</param>
            <param name="value">64 bit value to write to OTP page address</param>
            <param name="writeSpd">Write speed to OTP memory, default value is 0xA548878</param>
            <param name="prevWriteCheck">Check if page address half has already been written to; should always be 1 unless the user knows what he/she is doing</param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.PinFcns">
            <summary>
            Functions to Read and Write to GPIOs (General Purpose IO pins)
            </summary>
        </member>
        <member name="P:AdisApi.PinFcns.Cancel">
            <summary>
            Used to exit loops
            </summary>
        </member>
        <member name="M:AdisApi.PinFcns.#ctor(AdisApi.AdisBase)">
            <summary>
            Creates a new instance of PinFcns for a specified SDP based board.
            </summary>
        </member>
        <member name="P:AdisApi.PinFcns.AdisBase">
            <summary>
            Gets the AdisBase object associated with this instanc of PinFcns.
            </summary>
        </member>
        <member name="M:AdisApi.PinFcns.ReadPins(AdisApi.IPinObject[])">
            <summary>
            Reads the value of a group of pins
            </summary>
            <param name="pins">IPinObjects to use for PulseWait Operation</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinFcns.ReadPins(System.Collections.Generic.IEnumerable{AdisApi.IPinObject})">
            <summary>
            Reads the value of a group of pins
            </summary>
            <param name="pins">IPinObjects to use for PulseWait Operation</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinFcns.ReadPin(AdisApi.IPinObject)">
            <summary>
            Reads the value of a pin
            </summary>
            <param name="pin">IPinObject to use for PulseWait Operation</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinFcns.SetPin(AdisApi.IPinObject,System.UInt32)">
            <summary>
            Sets the value of a pin
            </summary>
            <param name="pin">IPinObject to use for PulseWait Operation</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinFcns.StartIntervalMeasurement(AdisApi.PinObject,System.UInt32,AdisApi.PinObject,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="startPin">Start Pin Trigger</param>
            <param name="startPol">Polarity for start pin trigger; 0 for falling, 1 for rising</param>
            <param name="stopPin">Stop Pin Trigger</param>
            <param name="stopPol">Polarity for stop pin trigger; 0 for falling, 1 for rising</param>
            <param name="delay">Delay after first pin trigger before waiting for final pin trigger</param>
        </member>
        <member name="M:AdisApi.PinFcns.CheckIntervalMeasurement">
            <summary>
            Returns the results form an interval measurement.
            </summary>
            <returns>Two element array. Time is in uSeconds. Element 0 is MSBs, element 1 id LSBs.</returns>
        </member>
        <member name="M:AdisApi.PinFcns.ReadTime(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Measures the time elapsed between the initial triggered pin and the final triggered pin
            </summary>
            <param name="start_pin">Start Pin Trigger</param>
            <param name="start_polarity">Polarity for start pin trigger; 0 for falling, 1 for rising</param>
            <param name="stop_pin">Stop Pin Trigger</param>
            <param name="stop_polarity">Polarity for stop pin trigger; 0 for falling, 1 for rising</param>
            <param name="delay">Delay after first pin trigger before waiting for final pin trigger</param>
            <returns>Two element array. Time is in uSeconds. Element 0 is MSBs, element 1 id LSBs.</returns>
        </member>
        <member name="M:AdisApi.PinFcns.PulseDrive(AdisApi.IPinObject,System.UInt32,System.Double,System.UInt32)">
            <summary>
            Sends a pulse to the specified pin
            </summary>
            <param name="pin">IPinObject to use for PulseWait Operation</param>
            <param name="polarity">0 for falling edge, 1 for rising edge</param>
            <param name="pperiod">Period of pulse</param>
            <param name="mode">Number of times the pulse appears</param>
        </member>
        <member name="M:AdisApi.PinFcns.ResetMsr">
            <summary>
            Measures the time elapsed after reset falling edge and the next DR falling edge. This has not been tested
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinFcns.PulseWait(AdisApi.IPinObject,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Waits for an edge / pulse
            </summary>
            <param name="pin">IPinObject to use for PulseWait Operation</param>
            <param name="polarity">0 for falling, 1 for rising</param>
            <param name="delayInMs">Delay / time elapsed (ms) before looking for edge trigger</param>
            <param name="timeoutInMs">Max time to wait for edge before exiting the wait for the edge trigger</param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.PortType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.PortType.F">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.PortType.G">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.PortType.H">
            <summary>
            
            </summary>
        </member>
        <member name="T:AdisApi.DioPinArray">
            <summary>
            Holds pin information for DUT DIO pins in a pin map.
            </summary>
        </member>
        <member name="M:AdisApi.DioPinArray.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="numPins"></param>
        </member>
        <member name="P:AdisApi.DioPinArray.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="pinNum"></param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.PinMapObject">
            <summary>
            A group of SdpPinObjects that describe a SpiInterface.
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.SclkPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.MisoPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.MosiPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.CsPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.Cs2Pin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.ReadyPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.ResetPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.SyncPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.TckPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.TmsPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.TdiPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.PinMapObject.TdoPin">
            <summary>
            
            </summary>
        </member>
        <member name="F:AdisApi.PinMapObject.DioPins">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.PinMapObject.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="numPins"></param>
        </member>
        <member name="M:AdisApi.PinMapObject.createDcTestCpldPinMap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinMapObject.createDcTestDutPinMap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinMapObject.createEvalAdisPinMap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinMapObject.createCharacAdisPinMap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AdisApi.PinObject">
            <summary>
            Specifies properties for a Blackfin GPIO pin.
            </summary>
        </member>
        <member name="P:AdisApi.PinObject.pinConfig">
            <summary>
            Provides an SDP configuration word for the parameter array.
            </summary>
        </member>
        <member name="P:AdisApi.PinObject.Bit">
            <summary>
            The bit (0 to 15) associated with the Blackfin pin.
            </summary>
        </member>
        <member name="P:AdisApi.PinObject.Port">
            <summary>
            The port (F, G, H) that contains the Blackfin pin.
            </summary>
        </member>
        <member name="P:AdisApi.PinObject.Invert">
            <summary>
            True if pin logic is to be inverted.
            </summary>
        </member>
        <member name="M:AdisApi.PinObject.#ctor">
            <summary>
            Creates a new instance of PinObject
            </summary>
        </member>
        <member name="M:AdisApi.PinObject.#ctor(AdisApi.PortType,System.UInt32)">
            <summary>
            Creates a new instance of PinObject with the given port and bit.
            </summary>
            <param name="port"></param>
            <param name="bit"></param>
        </member>
        <member name="M:AdisApi.PinObject.#ctor(AdisApi.PortType,System.UInt32,System.Boolean)">
            <summary>
            Creates a new instance of PinObject with the given port, bit, and inversion.
            </summary>
            <param name="port"></param>
            <param name="bit"></param>
            <param name="invert"></param>
        </member>
        <member name="M:AdisApi.PinObject.ToString">
            <summary>
            Returns a string representation of the PinObject.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinObject.Equals(System.Object)">
            <summary>
            Returns true if instances contain the same pin configuration.
            </summary>
            <param name="obj">Object to be compared.</param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PinObject.GetHashCode">
            <summary>
            Returns a hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:AdisApi.ISpiInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.ISpiInterface.AdisBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.ISpiInterface.Connector">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.ISpiInterface.DrActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.ISpiInterface.DrPin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.ISpiInterface.DrPolarity">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.ISpiInterface.ReadArrayU16(System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="readLength"></param>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.ReadArrayU32(System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="readLength"></param>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.ReadWordU16(System.Boolean)">
            <summary>
            
            </summary>
            <param name="mosiState"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.ReadWordU16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.ReadWordU16(System.UInt16)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.ReadWordU32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.ReadWordU32(System.Boolean)">
            <summary>
            
            </summary>
            <param name="mosiState"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.ReadWordU32(System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="P:AdisApi.ISpiInterface.SclkFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.ISpiInterface.SdpBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.ISpiInterface.WordSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.ISpiInterface.WriteReadArrayU16(System.UInt16[])">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.WriteReadArrayU16(System.UInt16[],System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.WriteWordU16(System.UInt16)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
        </member>
        <member name="M:AdisApi.ISpiInterface.WriteWordU32(System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
        </member>
        <member name="M:AdisApi.ISpiInterface.GetStreamDataPacketU16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.ISpiInterface.StopStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.ISpiInterface.StreamFromU16(System.UInt16[],System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
        </member>
        <member name="M:AdisApi.ISpiInterface.WriteReadStreamU16(System.UInt16[],System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.PulseFcnsTimingMeas">
            <summary>
            Basic SPI configuration, reads, and writes using ADiS spi code on Blackfin.
            </summary>
        </member>
        <member name="M:AdisApi.PulseFcnsTimingMeas.#ctor(AdisApi.AdisBase)">
            <summary>
            Set properties to values for pulse fcns and edge timing measure
            </summary>
        </member>
        <member name="P:AdisApi.PulseFcnsTimingMeas.AdisBase">
            <summary>
            Gets the AdisBase object associated with thie Spi interface.
            </summary>
        </member>
        <member name="P:AdisApi.PulseFcnsTimingMeas.Cancel">
            <summary>
            Used to exit loops
            </summary>
        </member>
        <member name="M:AdisApi.PulseFcnsTimingMeas.StartIntervalMeasurement(AdisApi.PinObject,System.UInt32,AdisApi.PinObject,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="startPin"></param>
            <param name="startPol"></param>
            <param name="stopPin"></param>
            <param name="stopPol"></param>
            <param name="delay"></param>
        </member>
        <member name="M:AdisApi.PulseFcnsTimingMeas.CheckIntervalMeasurement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PulseFcnsTimingMeas.ReadTime(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Measures the time elapsed between the initial triggered pin and the final triggered pin
            </summary>
            <param name="start_pin">Start Pin Trigger</param>
            <param name="start_polarity">Polarity for start pin trigger; 0 for falling, 1 for rising</param>
            <param name="stop_pin">Stop Pin Trigger</param>
            <param name="stop_polarity">Polarity for stop pin trigger; 0 for falling, 1 for rising</param>
            <param name="delay">Delay after first pin trigger before waiting for final pin trigger</param>
            <returns>Two element array. Time is in us</returns>
        </member>
        <member name="M:AdisApi.PulseFcnsTimingMeas.PulseDrive(AdisApi.PinObject,System.UInt32,System.Double,System.UInt32)">
            <summary>
            Sends a pulse to the specified pin
            </summary>
            <param name="pin">First nibble is port, second nibble is pin</param>
            <param name="polarity">0 for falling edge, 1 for rising edge</param>
            <param name="pperiod">Period of pulse</param>
            <param name="mode">Number of times the pulse appears</param>
        </member>
        <member name="M:AdisApi.PulseFcnsTimingMeas.ResetMsr">
            <summary>
            Measures the time elapsed after reset falling edge and the next DR falling edge. This has not been tested
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.PulseFcnsTimingMeas.PulseWait(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Waits for an edge / pulse
            </summary>
            <param name="pinConfig">Upper nibble is port, lower nibble is pin</param>
            <param name="polarity">0 for falling, 1 for rising</param>
            <param name="delayInMs">Delay / time elapsed (ms) before looking for edge trigger</param>
            <param name="timeoutInMs">Max time to wait for edge before exiting the wait for the edge trigger</param>
            <returns></returns>
        </member>
        <member name="T:AdisApi.SpiIce40">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.SpiIce40.#ctor(AdisApi.AdisBase)">
            <summary>
            Creates a new instance of the SpiIce40 class using the specified SDP base object.
            </summary>
            <param name="AdisBase"></param>
        </member>
        <member name="P:AdisApi.SpiIce40.AdisBase">
            <summary>
            Gets the AdisBase object associated with thie Spi interface.
            </summary>
        </member>
        <member name="P:AdisApi.SpiIce40.SclkPin">
            <summary>
            pinObject that specifies the configuration of the FPGA SPI_SCK pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiIce40.MosiPin">
            <summary>
            pinObject that specifies the configuration of the FPGA SPI_SI pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiIce40.CsPin">
            <summary>
            pinObject that specifies the configuration of the FPGA SPI_SS_B pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiIce40.ResetPin">
            <summary>
            pinObject that specifies the configuration of the FPGA CRESET_B pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiIce40.ReadyPin">
            <summary>
            pinObject that specifies the configuration of the FPGA CDONE pin.
            </summary>
        </member>
        <member name="P:AdisApi.SpiIce40.ConfigurationDone">
            <summary>
            Returns True if the CDONE pin was high after the previous FPGA configuration attempt. 
            </summary>
        </member>
        <member name="P:AdisApi.SpiIce40.SclkFrequency">
            <summary>
            Gets or sets the SPI Clock Frequency (in Hz) to use for this SPI interface.
            </summary>
        </member>
        <member name="M:AdisApi.SpiIce40.initializePins(AdisApi.PinMapObject)">
            <summary>
            
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AdisApi.SpiIce40.Configure(System.String)">
            <summary>
            Configures the CPLD using data from file with the specified name.
            </summary>
            <param name="fileName">Binary file containing configuration data.</param>
        </member>
        <member name="M:AdisApi.SpiIce40.Configure(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Configures the CPLD using data from specified buffer.
            </summary>
            <param name="buffer">IEnumerable of bytes containing configuration data.</param>
        </member>
        <member name="M:AdisApi.SpiIce40.ConfigWithStoredData">
            <summary>
            Configures the CPLD using data currently stored in SDP SDRAM to the flash.
            </summary>
        </member>
        <member name="M:AdisApi.SpiIce40.CreateConfigParameters">
            <summary>
            Creates a parameter array populated with default values based on instance properties.
            </summary>           
        </member>
        <member name="T:AdisApi.FormGPIO">
            <summary>
             
            </summary>
        </member>
        <member name="M:AdisApi.FormGPIO.#ctor(sdpApi1.Gpio)">
            <summary>
            
            
            </summary>
            <param name="gpio"></param>
        </member>
        <member name="F:AdisApi.FormGPIO.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AdisApi.FormGPIO.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AdisApi.FormGPIO.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:AdisApi.FormDaughter">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.FormDaughter.#ctor(AdisApi.AdisBase)">
            <summary>
            
            </summary>
            <param name="sdp"></param>
        </member>
        <member name="F:AdisApi.FormDaughter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AdisApi.FormDaughter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AdisApi.FormDaughter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:AdisApi.SdpDaughter">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.SdpDaughter.#ctor(sdpApi1.SdpBase)">
            <summary>
            
            </summary>
            <param name="sdp"></param>
        </member>
        <member name="M:AdisApi.SdpDaughter.#ctor(AdisApi.AdisBase)">
            <summary>
            
            </summary>
            <param name="adis"></param>
        </member>
        <member name="P:AdisApi.SdpDaughter.EepromAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:AdisApi.SdpDaughter.Connector">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.SdpDaughter.ProgramSPIFlash(System.String,System.Boolean,System.Boolean,sdpApi1.FlashDev)">
            <summary>
            
            </summary>
            <param name="programFilePath"></param>
            <param name="reboot"></param>
            <param name="reconnect"></param>
            <param name="flashDev"></param>
        </member>
        <member name="M:AdisApi.SdpDaughter.WriteEEPROM(System.String)">
            <summary>
            
            </summary>
            <param name="programFilePath"></param>
        </member>
        <member name="T:AdisApi.FormAdisBase">
            
        </member>
        <member name="M:AdisApi.FormAdisBase.#ctor(AdisApi.AdisBase)">
            <summary>
            
            </summary>
            <param name="adisBase"></param>
        </member>
        <member name="F:AdisApi.FormAdisBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AdisApi.FormAdisBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AdisApi.FormAdisBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:AdisApi.Spi">
            <summary>
            Basic SPI configuration, reads, and writes using ADiS spi code on Blackfin.
            </summary>    
        </member>
        <member name="M:AdisApi.Spi.#ctor(AdisApi.AdisBase,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the Spi class.
            </summary>
            <param name="adisBase">AdisBase object for adp board to use.</param>
            <param name="sdpConn">SDP Connector being used.</param>
            <param name="slaveSelect">SDP slave select line to use.</param>
            <param name="wordSize">SPI Word size in bits (number of SCLKs).</param>
            <param name="cpha">SPI Clock Phase setting to use.</param>
            <param name="cpol">SPI Clock polarity setting to use.</param>
            <param name="sclkFrequency">SPI clock frequency in Hz.</param>
        </member>
        <member name="M:AdisApi.Spi.#ctor(AdisApi.AdisBase,sdpApi1.SdpConnector,sdpApi1.SpiSel,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the Spi class.
            </summary>
            <param name="adisBase">AdisBase object for adp board to use.</param>
            <param name="sdpConn">SDP Connector being used.</param>
            <param name="slaveSelect">SDP slave select line to use.</param>
            <param name="wordSize">SPI Word size in bits (number of SCLKs).</param>
            <param name="cpha">SPI Clock Phase setting to use.</param>
            <param name="cpol">SPI Clock polarity setting to use.</param>
            <param name="sclkFrequency">SPI clock frequency in Hz.</param>
        </member>
        <member name="P:AdisApi.Spi.AdisBase">
            <summary>
            Gets the AdisBase object associated with thie Spi interface.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.Cpha">
            <summary>
            Gets or sets a value indicating whether the Clock Phase is 0 or 1.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.Cpol">
            <summary>
            Gets or sets a value indicating whether the Clock Polarity is 0 or 1.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.Connector">
            <summary>
            Gets or sets the SDP connector to use for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.SclkFrequency">
            <summary>
            Gets or sets the SPI Clock Frequency (in Hz) to use for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.SlaveSelect">
            <summary>
            Gets or sets the Slave Select line to use for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.StallCycles">
            <summary>
            Gets or sets the Slave Select line to use for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.WordSize">
            <summary>
            Gets or sets the word size (number of SCLS per read/write) for this SPI interface.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.SdpBase">
            <summary>
            Gets the SDP Base object for this interface, use as shorthand for AdisBase.Base.
            </summary>
        </member>
        <member name="P:AdisApi.Spi.DrPin">
            <summary>
            Gets or sets the data ready pin (PH0 - PH15)
            </summary>
        </member>
        <member name="P:AdisApi.Spi.DrActive">
            <summary>
            Gets or sets the data ready active bit
            </summary>
        </member>
        <member name="P:AdisApi.Spi.DrPolarity">
            <summary>
            Gets or sets the data ready polarity
            </summary>
        </member>
        <member name="P:AdisApi.Spi.CsTrigger">
            <summary>
            Byte 0 = 2 means set din low before sclk toggle, byte 0 = 1 means set din high before sclk toggle; byte 1 = 1 means cs high during sclk cycle, byte 2 = 0 means cs low during sclk cycle
            All 0's mean cs low during sclk cycle without setting din high or low before cs and sclk cycle toggles(this mode is not activated)
            </summary>
        </member>
        <member name="M:AdisApi.Spi.WriteWordU8(System.Byte)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU8">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU8(System.Boolean)">
            <summary>
            
            </summary>
            <param name="mosiState"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU8(System.Byte)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.ReadArrayU8(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="readLength"></param>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.WriteReadArrayU8(System.Byte[],System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.WriteReadArrayU8(System.Byte[])">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.WriteWordU16(System.UInt16)">
            <summary>
            Write one unsigned 16 bit word through SPI interface
            </summary>
            <param name="writeData">Data word to write.</param>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU16">
            <summary>
            Reads one 16 bit word from spi interface into a ushort.
            </summary>
            <returns>Word read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU16(System.Boolean)">
            <summary>
            Reads one 16 bit word from spi interface into a ushort.
            </summary>
            <returns>Word read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU16(System.UInt16)">
            <summary>
            Reads one unsigned 16 bit word from spi interface into a ushort.
            </summary>
            <param name="writeData">Data word to be sent during the read operation.</param>
            <returns>Word read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.WriteReadArrayU16(System.UInt16[],System.UInt32)">
            <summary>
            Reads an array of 16 bit words from spi interface in to an ushort array.  
            </summary>
            <param name="numCaptures">Number of words to read.</param>
            <param name="writeData">Data words to be sent during each read operations.</param>
            <returns>Words read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.WriteReadArrayU16(System.UInt16[])">
            <summary>
            Reads an array of 16 bit words from spi interface in to an ushort array the same length as data.  
            </summary>
            <param name="writeData">Data words to be sent during each read operations.</param>
            <returns>Words read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.ReadArrayU16(System.Int32,System.UInt16)">
            <summary>
            Reads an array of 16 bit words from spi interface in to an ushort array.  
            </summary>
            <param name="readLength">Number of words to read.</param>
            <param name="writeData">Data word to be sent during each read operation.</param>
            <returns>Words read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.WriteWordU32(System.UInt32)">
            <summary>
            Write one unsigned32 bit word through SPI interface
            </summary>
            <param name="writeData">Data word to write.</param>
        </member>
        <member name="M:AdisApi.Spi.ReadArrayU32(System.Int32,System.UInt32)">
            <summary>
            Reads an array of 32 bit words from spi interface in to an uint array.  
            </summary>
            <param name="readLength">Number of words to read.</param>
            <param name="writeData">Data word to be sent during each read operation.</param>
            <returns>Words read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU32">
            <summary>
            Reads one 32 bit word from spi interface into a uint.
            </summary>
            <returns>Word read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU32(System.Boolean)">
            <summary>
            Reads one 32 bit word from spi interface into a uint.
            </summary>
            <returns>Word read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.ReadWordU32(System.UInt32)">
            <summary>
            Reads one 32 bit word from spi interface into a uint.
            </summary>
            <param name="writeData">Data word to be sent during the read operation.</param>
            <returns>Word read from SPI interface.</returns>
        </member>
        <member name="M:AdisApi.Spi.WriteReadArrayU32(System.UInt32[],System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.WriteReadArrayU32(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.StopStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:AdisApi.Spi.StreamFromU16(System.UInt16[],System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
        </member>
        <member name="M:AdisApi.Spi.GetStreamDataPacketU16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.WriteReadStreamU16(System.UInt16[],System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="writeData"></param>
            <param name="numCaptures"></param>
            <param name="numBuffers"></param>
            <returns></returns>
        </member>
        <member name="M:AdisApi.Spi.insertConfigParameters(System.UInt32[]@)">
            <summary>
            Inserts parameters for configuration into header based on instance properties.
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:AdisApi.Spi.SpiSelParam">
            <summary>
            Returns the parameter to pass to Blackfin for spi select, based on connector and select line
            </summary>
            <returns>Parameter for spi select.</returns>
        </member>
    </members>
</doc>
