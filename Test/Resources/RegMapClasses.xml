<?xml version="1.0"?>
<doc>
<assembly>
<name>
RegMapClasses
</name>
</assembly>
<members>
<member name="T:RegMapClasses.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:RegMapClasses.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:RegMapClasses.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:RegMapClasses.CommandClass.Label">
 <summary>
 Display label for command.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.CommandClass.Mask">
 <summary>
 Mask of the bit position(s) within the command word.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.CommandClass.Value">
 <summary>
 State of the register that will activate the desired command. 
 </summary>
 <remarks>The state is not shifted before writing.</remarks>
</member>
<member name="P:RegMapClasses.CommandClass.Delay">
 <summary>
 Delay, in ms, that programs should wait after executing the command.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.CommandClass.RegLabel">
 <summary>
 Label of the register that is used for the Command.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.CommandClass.Routine">
 <summary>
 The routine that should be used to execute this command.
 </summary>
 <remarks>The action should be called with the Label of this command at the parameter.</remarks>
</member>
<member name="M:RegMapClasses.CommandClass.#ctor">
 <summary>
 Creates a new instance of the CommandClass object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandClass.ToString">
 <summary>
 Returns a string representation of the CommandClass object.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:RegMapClasses.CommandCollection">
 <summary>
 Stores a collection of CommandClass objects.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.CommandCollection.ErrorFound">
 <summary>
 Returns true if a parsing error was encountered during the previous reg map file read operation.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.CommandCollection.ErrorText">
 <summary>
 Returns a multi-line string containing descriptions of reg map file parsing errors.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandCollection.#ctor">
 <summary>
 Creates a new instance of CommandCollection
 </summary>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandCollection.Clear">
 <summary>
 Clears the command collection.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandCollection.IndexOf(System.String)">
 <summary>
 Return index of a given register in the map.
 </summary>
 <param name="key">Key string of register to process.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandCollection.IndexOf(RegMapClasses.CommandClass)">
 <summary>
 Return index of a given register in the map.
 </summary>
 <param name="cmd">Command to find index for.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandCollection.ReadFromCSV(System.String)">
 <summary>
 Loads a Register Map from The CSV File at the specified file path.
 </summary>
 <param name="FileName"></param>\
 <returns>Returns true if parses successfully, False if an error was encountered.</returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandCollection.CreateCollection(System.IO.StreamReader)">
 <summary>
 Creates a Command Collection Object based on a streamReader.
 </summary>
 <param name="reader"></param>
 <returns>Returns true if parses successfully, False if an error was encountered.</returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandCollection.CreateCollection(System.String)">
 <summary>
 Creates a Command Collection Object based on a multi-line string.
 </summary>
 <param name="text"></param>
 <returns>Returns true if parses successfully, False if an error was encountered.</returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.CommandCollection.CreateCollection(System.Collections.Generic.IList{System.String})">
 <summary>
 Creates a Command Collection Object based on a list of strings.
 </summary>
 <param name="lines"></param>
 <returns>Returns true if parses successfully, False if an error was encountered.</returns>
 <remarks></remarks>
</member>
<member name="T:RegMapClasses.RegClass">
 <summary>
 Stores information about a device register.
 </summary>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.Label">
 <summary>
 The register name, as used within ADI.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.EvalLabel">
 <summary>
 The register name as shown to customers in eval software
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.Page">
 <summary>
 The memory page on which the register resides, or the AuxBaseAddress for embedded cal registers.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.Address">
 <summary>
 The address of the register, or the base address of an embedded cal register.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.AuxAddress">
 <summary>
 The Auxiliary Address of an embedded cal register.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.NumBytes">
 <summary>
 The number of bytes (1, 2, or 4) in a register.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.Offset">
 <summary>
 The offset applied when scaling the register. 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.Scale">
 <summary>
 The scale factor to be applied when scaling a register.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.ReadLen">
 <summary>
 The number of bits, starting with the LSB, that are used in the register.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsFlashable">
 <summary>
 True if the register is backed up in flash memory.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsReadable">
 <summary>
 True if the register is readable.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsReadProtected">
 <summary>
 True if register is read protected.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsWriteable">
 <summary>
 True if the register is writable.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsWriteProtected">
 <summary>
 True if register is write protected.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsTwosComp">
 <summary>
 True if the data is stored in twos-complement format.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsFloat">
 <summary>
 True if the register data is stored in 32 bit floating point format.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.DefaultValue">
 <summary>
 Stores the unscaled raw binary datasheet default value for a register.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>Will be Null if there is no default.</remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsCalReg">
 <summary>
 True if the register is a factory cal register that is to be retained during reprogramming.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>.</remarks>
</member>
<member name="P:RegMapClasses.RegClass.EvalType">
 <summary>
 Stores the reg type for use by eval programs.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.Type">
 <summary>
 Stores the reg type for use by char programs.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsEmbedded">
 <summary>
 True if the register is an embedded cal register.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.CalScale">
 <summary>
 The scaling factor for a factory cal register, typically used in the form: 2^CalScale.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.SpiTransferCount">
 <summary>
 Returns the number of 16 bit SPI register transfers needed to transfer a registers.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.HexFormat">
 <summary>
 Returns the appropriate string to use to format the register contents in hex notation.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegClass.#ctor">
 <summary>
 Constructor - populates register with default values
 </summary>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegClass.ToString">
 <summary>
 Returns a String Representation of the class.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegClass.TwosCompFlag">
 <summary>Obsolete.  Use IsTwosComp instead.</summary>
 <remarks>Obsolete.  Use IsTwosComp instead.</remarks>
</member>
<member name="P:RegMapClasses.RegClass.WriteFlag">
 <summary>Obsolete. Use IsWriteable instead.</summary>
 <remarks>Obsolete. Use IsWriteable instead.</remarks>
</member>
<member name="P:RegMapClasses.RegClass.ReadFlag">
 <summary>Obsolete. Use IsReadable instead.</summary>
 <remarks>Obsolete. Use IsReadable instead.</remarks>
</member>
<member name="P:RegMapClasses.RegClass.CalReg">
 <summary>Obsolete. Use IsCalReg instead.</summary>
 <remarks>Obsolete. Use IsCalReg instead.</remarks>
</member>
<member name="P:RegMapClasses.RegClass.Hidden">
 <summary>Obsolete. Use IsReadProtected And/Or IsWriteProtected instead.</summary>
 <remarks>Obsolete. Use IsReadProtected and/or IsWriteProtected instead.</remarks>
</member>
<member name="P:RegMapClasses.RegClass.IsHidden">
 <summary>Obsolete. Use IsReadProtected and/or IsWriteProtected instead.</summary>
 <remarks>Obsolete. Use IsReadProtected and/or IsWriteProtected instead.</remarks>
</member>
<member name="P:RegMapClasses.RegMapCollection.BurstReadTrig">
 <summary>
 Returns a reference to the burst mode read trigger register.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegMapCollection.BurstReadList">
 <summary>
 Returns a reference to a list of burst mode registers
 </summary>
 <value></value>
 <returns>Returns null if loaded map does not support burst mode.</returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegMapCollection.ErrorFound">
 <summary>
 Returns true if a parsing error was encountered during the previous reg map file read operation.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegMapCollection.ErrorText">
 <summary>
 Returns a multi-line string containing descriptions of reg map file parsing errors.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegMapCollection.HasEmbeddedRegs">
 <summary>
 Returns true if the loaded map has embedded register related columns.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:RegMapClasses.RegMapCollection.HasPages">
 <summary>
 Returns true if the loaded map has embedded register related columns.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.GetPropertyValue(System.String)">
 <summary>
 Returns the value read from the station file for a specific key. 
 </summary>
 <param name="key">Config file item to read (non-case sensitive).</param>
 <returns></returns>
 <remarks>Throws an exception if property was not supplied.</remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.HasPropertyValue(System.String)">
 <summary>
 Returns true if a value was read for a specific key in the reg map file.
 </summary>
 <param name="key">Config file item to read (non-case sensitive).</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.TryGetPropertyValue(System.String,System.String@)">
 <summary>
 Gets the property value associated with the supplied key.
 </summary>
 <param name="key">Key for which value is to be retrieved.</param>
 <param name="value">Value retrieved (or "" if key is not found.)</param>
 <returns>True if value was found for the key, false if key is not valid property parameter.</returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.#ctor">
 <summary>
 Creates a new instance of RegMapCollection
 </summary>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.Clear">
 <summary>
 Clears the register map collection.
 </summary>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.IndexOf(System.String)">
 <summary>
 Return index of a given register in the map.
 </summary>
 <param name="key">Key string of register to process.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.IndexOf(RegMapClasses.RegClass)">
 <summary>
 Return index of a given register in the map.
 </summary>
 <param name="reg">Register to find index for.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.ReadFromCSV(System.String)">
 <summary>
 Loads a Register Map from The CSV File at the specified file path.
 </summary>
 <param name="FileName"></param>\
 <returns>Returns true if parses successfully, False if an error was encountered.</returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.CreateCollection(System.IO.StreamReader)">
 <summary>
 Creates a Reg Collection Object based on a streamReader.
 </summary>
 <param name="reader"></param>
 <returns>Returns true if parses successfully, False if an error was encountered.</returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.CreateCollection(System.String)">
 <summary>
 Creates a Reg Collection Object based on a multi-line string formatted as a RegFile.
 </summary>
 <param name="text"></param>
 <returns>Returns true if parses successfully, False if an error was encountered.</returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.CreateCollection(System.Collections.Generic.IList{System.String})">
 <summary>
 Creates a Reg Collection Object based on a list of lines formatted as a RegFile.
 </summary>
 <param name="lines"></param>
 <returns>Returns true if parses successfully, False if an error was encountered.</returns>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.WriteDefaultsToFile(System.String)">
 <summary>
 Writes the default values to a tab delimited file (for debug purposes.)
 </summary>
 <param name="fileName"></param>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.WriteDefaultsToFile(System.String,System.String)">
 <summary>
 Writes the default values to a delimited file (for debug purposes.)
 </summary>
 <param name="fileName"></param>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.ValidateBurstModeInfo">
 <summary>
 Checks that the BurstMode information is correct, populates BurstReadList 
 </summary>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.ParseInteger(System.String)">
 <summary>
 Parses an Integer from decimal string.
 </summary>
 <param name="s"></param>
 <returns></returns>
</member>
<member name="M:RegMapClasses.RegMapCollection.ParseBurstMode(System.String,RegMapClasses.RegClass)">
 <summary>
 Parses a row of the BurstModeColumn, filling BurstReadReg and BurstReadDict.
 </summary>
 <param name="s"></param>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapCollection.ParseProperty(System.String)">
 <summary>
 Parses a row of the Properties column, populates PropertyDict.
 </summary>
 <param name="s"></param>
 <remarks></remarks>
</member>
<member name="M:RegMapClasses.RegMapExtensions.SpiTransferCount(System.Collections.Generic.IEnumerable{RegMapClasses.RegClass})">
 <summary>
 Returns the number of 16 bit SPI register transfers needed to transfer a group of registers.
 </summary>
 <param name="regs"></param>
 <returns></returns>
 <remarks>Extends IEnumerable so we can use on generic lists or arrays of RegClass Objects.</remarks>
</member>
<member name="M:RegMapClasses.RegMapExtensions.HasSingleBitSet(System.Byte)">
 <summary>
 Returns true if one and only one bit is set.
 </summary>
 <returns></returns>
</member>
<member name="M:RegMapClasses.RegMapExtensions.HasSingleBitSet(System.UInt16)">
 <summary>
 Returns true if one and only one bit is set.
 </summary>
 <returns></returns>
</member>
<member name="M:RegMapClasses.RegMapExtensions.HasSingleBitSet(System.UInt32)">
 <summary>
 Returns true if one and only one bit is set.
 </summary>
 <returns></returns>
</member>
<member name="M:RegMapClasses.RegMapExtensions.HasSingleBitSet(System.UInt64)">
 <summary>
 Returns true if one and only one bit is set.
 </summary>
 <returns></returns>
</member>
<member name="M:RegMapClasses.RegMapExtensions.GetMaskedBit(System.Byte,System.Byte)">
 <summary>
 Returns the value of the bit specified in the mask.
 </summary>
 <returns></returns>
</member>
<member name="M:RegMapClasses.RegMapExtensions.GetMaskedBit(System.UInt16,System.UInt16)">
 <summary>
 Returns the value of the bit specified in the mask.
 </summary>
 <returns></returns>
</member>
<member name="M:RegMapClasses.RegMapExtensions.GetMaskedBit(System.UInt32,System.UInt32)">
 <summary>
 Returns the value of the bit specified in the mask.
 </summary>
 <returns></returns>
</member>
<member name="M:RegMapClasses.RegMapExtensions.GetMaskedBit(System.UInt64,System.UInt64)">
 <summary>
 Returns the value of the bit specified in the mask.
 </summary>
 <returns></returns>
</member>
</members>
</doc>
